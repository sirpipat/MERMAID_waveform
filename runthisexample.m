function runthisexample(example, ddir, specfem_bin)
% RUNTHISEXAMPLE(example, ddir, specfem_bin)
%
% Runs a specfem2D simulation for this example. The script generates model
% files which may be modified. Then, it runs the simulation. The directory
% containing all input files have to be structure as below:
% < ddir >
%   i-> DATA/
%       i-> Par_file_< example >
%       i-> SOURCE_< example >
%       i-> interfaces_< example >.dat
%       i-> supplementary_< example >.mat
%       o-> various files generated by xmeshfem2D/xspecfem2D
%   o-> xmeshfem2D
%   o-> xspecfem2D
%   o-> OUTPUT_FILES/
%       o-> various files generated by xmeshfem2D/xspecfem2D
%
% i-> denotes files/folders that should exist prior to the function call.
% o-> denotes output files/folders generated by this function.
%
% INPUT:
% example       example name
% ddir          directory where all input files are located
% specfem_bin   directory of specfem2D's binaries
%
% OUTPUT:
% no output. The output files generated by xspecfem2D are located at
% ddir/OUTPUT_FILES.
%
% Last modified by sirawich@princeton.edu, 07/22/2021

currentdir = pwd;

% move to the directory where the simulation takes place
% xmeshfem2D and xspecfem2D have to be call where they are located.
eval(['cd ' ddir]);

% set up directory structure in the example directory
system(sprintf('mkdir -p %sOUTPUT_FILES', ddir));

% cleans output files
system(sprintf('rm -rf %sOUTPUT_FILES/*', ddir));

% link excecutatbles
system(sprintf('rm -rf %sxmeshfem2D %sxspecfem2D', ddir));
system(sprintf('ln -s %sxmeshfem2D %s', specfem_bin, ddir));
system(sprintf('ln -s %sxspecfem2D %s', specfem_bin, ddir));

%% run a pilot to get the model files
% copy Par_file_example to Par_file
params = loadparfile(sprintf('%sDATA/Par_file_%s', ddir, example));
params.NSTEP = 5;
params.MODEL = 'default';
writeparfile(params, sprintf('%sDATA/Par_file', ddir));

% copy SOURCE_example to SOURCE
system(sprintf('cp %sDATA/SOURCE_%s %s/DATA/SOURCE', ddir, example, ddir));

% run
system(sprintf('%sxmeshfem2D', ddir));
system(sprintf('%sxspecfem2D', ddir));

%% set the velocity / density model within a medium
load(sprintf('%sDATA/supplementary_%s.mat', ddir, example), 'water_model');

if ~strcmp(water_model.name, 'homogeneous')
    grid.x = loadb(sprintf('%sDATA/proc000000_x.bin', ddir), 'float32');
    grid.z = loadb(sprintf('%sDATA/proc000000_z.bin', ddir), 'float32');
    grid.vp = loadb(sprintf('%sDATA/proc000000_vp.bin', ddir), 'float32');
    grid.vs = loadb(sprintf('%sDATA/proc000000_vs.bin', ddir), 'float32');
    grid.rho = loadb(sprintf('%sDATA/proc000000_rho.bin', ddir), 'float32');

    % Munk model
    [data.vp, data.d, ~, ~] = munk(water_model.zm, water_model.zc, ...
        water_model.dz, water_model.B);
    data.rho = ones(size(data.d)) * 1020;

    % read interfaces and layers
    [~, layers] = loadinterfacefile(sprintf('%sDATA/interfaces_%s.dat', ddir, example));

    N.NEX = params.nx;
    N.NEZ = sum(layers);
    N.NGLLX = 5;
    N.NGLLZ = 5;

    Ninterface = sum(layers) - layers(end);

    % set ocean model
    grid = setoceanmodel(data, grid, N, Ninterface);

    % write the new ocean model (vp)
    writeb(grid.vp, sprintf('%sDATA/proc000000_vp.bin', ddir), 'float32');
end

%% run the full simulation with updated model
system(sprintf('cp %sDATA/Par_file_%s %s/DATA/Par_file', ddir, example, ddir));

% cleans output files
system(sprintf('rm -rf %sOUTPUT_FILES/*', ddir));

% run
system(sprintf('%sxmeshfem2D', ddir));
system(sprintf('%sxspecfem2D', ddir));

% copy DATA/ to OUTPUT_FILES/
system(sprintf('cp -r %sDATA/ %sOUTPUT_FILES/DATA/', ddir, ddir));

% zip the output
% system(sprintf('zip -r %soutput_%s.zip %sOUTPUT_FILES/', ddir, example, ddir)); 

% return to the directory where this function is called
eval(['cd ' currentdir]);
end