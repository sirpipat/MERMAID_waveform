function fig = plotsac2(SeisData, HdrData, varargin)
% fig = PLOTSAC2(SeisData, HdrData, varargin)
%
% Plots seismograms from data from the sac file generated by ARRIVAL2SAC
% with tagged phase arrivals.
%
% INPUT:
% SeisData      time series data
% HdrData       SAC header
% varargin      arguments for plot function
%
% OUTPUT:
% fig           figure handle of the plots
% 
% SEE ALSO:
% ARRIVAL2SAC, READSAC, PLOTSAC
%
% Last modified by Sirawich Pipatprathanporn, 11/01/2021

% gets the information from SAC header
[dt_ref, dt_B, dt_E, fs, npts, dts, tims] = gethdrinfo(HdrData);
t = seconds(tims - tims(1));

x = SeisData;
if false
    %x = detrend(decimate(detrend(x, 1), 5), 1);
    %fs = fs/5;
    x = bandpass(x, fs, 1, 2, 2, 2, 'butter');
end

fig = figure(5);
clf
set(fig, 'Units', 'inches', 'Position', [0 12 6 4])
ax1 = subplot('Position', [0.07 0.6 0.89 0.33], 'Box', 'on', 'TickDir', 'both');

% plot sesimogram
ax1 = signalplot(x, fs, 0, ax1, 'title', [], 'k', varargin{:});

% store phase and arrival times
phases   = cell(1, 10);
arrivals = zeros(1, 10);

% plot arrival times
phaseNum = 0;
phaseTime = HdrData.T0;
phaseName = HdrData.KT0;

% time limit
t_limit = ax1.XLim;
while phaseTime ~= -12345
    phases{phaseNum+1} = phaseName;
    arrivals(phaseNum+1) = seconds(dt_ref - dt_B) + phaseTime;
    t_limit = seconds(dt_ref - dt_B) + [HdrData.T0 phaseTime] + [-30 30];
    phaseNum = phaseNum + 1;
    switch phaseNum
        case 1
            phaseTime = HdrData.T1;
            phaseName = HdrData.KT1;
        case 2
            phaseTime = HdrData.T2;
            phaseName = HdrData.KT2;
        case 3
            phaseTime = HdrData.T3;
            phaseName = HdrData.KT3;
        case 4
            phaseTime = HdrData.T4;
            phaseName = HdrData.KT4;
        case 5
            phaseTime = HdrData.T5;
            phaseName = HdrData.KT5;
        case 6
            phaseTime = HdrData.T6;
            phaseName = HdrData.KT6;
        case 7
            phaseTime = HdrData.T7;
            phaseName = HdrData.KT7;
        case 8
            phaseTime = HdrData.T8;
            phaseName = HdrData.KT8;
        case 9
            phaseTime = HdrData.T9;
            phaseName = HdrData.KT9;
        otherwise
            break
    end
end

ax1.XLim = [max(t(1), t_limit(1)) min(t_limit(2), t(end))];

vline(ax1, arrivals, 'LineStyle', '--', 'LineWidth', 1, 'Color', 'r');

for ii = 1:phaseNum
    if mod(ii, 2) == 0
        [x_pos, y_pos] = norm2trueposition(ax1, 1/100, 1/10);
    else
        [x_pos, y_pos] = norm2trueposition(ax1, 1/100, 9/10);
    end
    text(x_pos + arrivals(ii) - ax1.XLim(1), y_pos, phases{ii}, 'FontSize', 12);
end

% adds title
ax1.Title.String = sprintf('Origin: %s, ID: %d, Mw = %5.2f', ...
    string(dt_ref), HdrData.USER7, HdrData.MAG);
ax1.XLabel.String = 'time (s)';


%% plot seismogram arround first P-wave arrival
wh = and(t - arrivals(1) >= -15, t - arrivals(1) <= 15);
ax2 = subplot('Position', [0.07 0.11 0.39 0.33], 'Box', 'on', 'TickDir', 'both');
ax2 = signalplot(x(wh), fs, indeks(t(wh), 1) - arrivals(1), ax2, ...
    phases{1}, [], 'k', varargin{:});
ax2.XLim = [-15 15];
vline(ax2, 0, 'LineStyle', '--', 'LineWidth', 1, 'Color', 'r');
ax2.XLabel.String = 'time (s)';
ax2.XTick = -15:5:15;
%% plot seismogram arround first S-wave arrival
s_index = 1;
while s_index < 10
    if strcmpi(phases{s_index}, 's') && arrivals(s_index) <= t(end)
        break
    end
    s_index = s_index + 1;
end
% if there is no valid S phase, search for Sdiff
if s_index == 10
    s_index = 1;
    while s_index < 10
        if strcmpi(phases{s_index}, 'Sdiff') && arrivals(s_index) <= t(end)
            break
        end
        s_index = s_index + 1;
    end
end

% if there is no valid S and Sdiff pahse, search for any S phase
if s_index == 10
    s_index = 1;
    while s_index < 10
        if strcmpi(indeks(phases{s_index}, 1), 's') && arrivals(s_index) <= t(end)
            break
        end
        s_index = s_index + 1;
    end
end

wh = and(t - arrivals(s_index) >= -15, t - arrivals(s_index) <= 15);
ax3 = subplot('Position', [0.57 0.11 0.39 0.33], 'Box', 'on', 'TickDir', 'both');
ax3 = signalplot(x(wh), fs, indeks(t(wh), 1) - arrivals(s_index), ax3, ...
    phases{s_index}, [], 'k', varargin{:});
ax3.XLim = [-15 15];
vline(ax3, 0, 'LineStyle', '--', 'LineWidth', 1, 'Color', 'r');
ax3.XLabel.String = 'time (s)';
ax3.XTick = -15:5:15;
end