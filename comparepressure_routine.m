function [t_shifts, CCmaxs, scales, n, metadata] = ...
    comparepressure_routine(obsmasterdir, synmasterdir, i_begin, i_end, ...
    plt, branch)
% [t_shifts, CCmaxs, scales, n] = ...
%     COMPAREPRESSURE_ROUTINE(obsmasterdir, synmasterdir, i_begin, ...
%     i_end, plt, branch)
%
% A script for run COMPAREPRESSURE over computed the response functions
% between z-displacement at the ocean bottom and the pressure at the
% hydrophone in the water column generated by RUNFLATSIM.
%
% INPUT:
% obsmasterdir      the master directory to the observed files sorted into
%                   IRIS event ID folders
% synmasterdir      the master directory to the synthetic files sorted into
%                   IRIS event ID folders
% i_begin           first index for IRIS event ID folders
% i_end             last index for IRIS event ID folders
% plt               whether to plot the figure from COMPAREPRESSURE or not
%                   [Default: false]
% branch            SPECFEM2D branch [default: 'master']
%                   'master' (commit: e937ac2f74f23622f6ebbc8901d30fb33c1a2c38)
%                   'devel'  (commit: cf89366717d9435985ba852ef1d41a10cee97884)
%
% OUTPUT:
% t_shifts          Best time shift where CC is maximum
% CCmaxs            Maximum correlation coefficient
% scales            Scaling to minimize the misfit
% n                 the number of data points
% metadata          SAC header variables sorted by variable names
%
% SEE ALSO:
% COMPAREPRESSURE
%
% Last modified by sirawich-at-princeton.edu, 02/23/2022

defval('obsmasterdir', '/home/sirawich/research/processed_data/MERMAID_reports_updated/')
defval('synmasterdir', '/home/sirawich/research/SYNTHETICS/')
defval('plt', false)
defval('branch', 'master')

[allsyndirs, dndex] = allfile(synmasterdir);

% input validation
if i_begin < 1 || i_end > dndex || i_begin > i_end
    error('i_begin and i_end must satisfy the condition: 1 <= i_begin <= i_end <= dndex')
end

CCmaxs = [];
t_shifts = [];
scales = [];
fileused = {};
n = 1;

% loop over IRIS event ID folders
for ii = i_begin:i_end
    evid = removepath(allsyndirs{ii});
    [allobsfiles, ondex] = allfile([obsmasterdir evid '/']);
    [allsynfiles, sndex] = allfile([allsyndirs{ii} '/']);
    % identify available receivers
    receiverid_obs = cell(1,ondex);
    for jj = 1:ondex
        receiverid_obs{jj} = indeks(cindeks(split(cindeks(split(...
            allobsfiles{jj}, '/'), 'end'), '.'), 2), 1:2);
    end
    
    receiverid_syn = cell(1,sndex);
    for jj = 1:sndex
        receiverid_syn{jj} = cindeks(split(removepath(allsynfiles{jj}), ...
            '_'), 2);
    end
    
    % keep only unique receivers
    [~, i_obs, ~] = unique(receiverid_obs);
    allobsfiles = allobsfiles(i_obs);
    
    [~, i_syn, ~] = unique(receiverid_syn);
    allsynfiles = allsynfiles(i_syn);
    
    % loop over receivers
    for jj = 1:length(allsynfiles)
        % read observed and synthetic SAC files
        [seis_o, hdr_o] = readsac(allobsfiles{jj});
        [seis_s, hdr_s] = readsac(allsynfiles{jj});
        
        % locate the output folders from RUNFLATSIM
        example = sprintf('flat_%d_%s', hdr_o.USER7, ...
            replace(hdr_o.KSTNM, ' ', ''));
        if strcmpi(branch, 'master')
            outputdirs = cell(2,1);
            outputdirs{1} = sprintf('%s%s_1/', getenv('REMOTE2D'), example);
            outputdirs{2} = sprintf('%s%s_2/', getenv('REMOTE2D'), example);
        else
            outputdirs = sprintf('%s%s/', getenv('REMOTE2D'), example);
        end

        % get best timeshift, CC, and scaling if the output folders exist
        try
            if strcmpi(branch, 'master')
                [~, ~, t_rf, rf] = cctransplot(outputdirs{1}, ...
                    outputdirs{2}, example, {'bottom', 'displacement'}, ...
                    {'hydrophone', 'pressure'}, 1/hdr_o.DELTA, false);
            else
                [~, ~, t_rf, rf] = cctransplot(outputdirs, ...
                    outputdirs, example, {'bottom', 'displacement'}, ...
                    {'hydrophone', 'pressure'}, 1/hdr_o.DELTA, false);
            end
            [t_shifts(n,:), CCmaxs(n,:), ~, ~, scales(n,:)] = ...
                comparepressure(seis_s, hdr_s, seis_o, hdr_o, rf, t_rf, ...
                [-10 20], [-5 5], plt, 5, false);
            fileused{n,1} = allsynfiles{jj};
            n = n + 1;
        catch ME
            fprintf('%s\n', ME.getReport);
            fprintf('Error occured. Move on to the next iteration.\n');
        end
    end
end
% fix the number of files
n = n - 1;
% gather metadata
metadata = getheaderarray(fileused);
end