function filename = writepp2024catalog(objstruct, filename)
% filename = WRITEPP2024CATALOG(obsstruct, filename)
%
% Write the catalog as plain text to a file.
%
% INPUT:
% objstruct         a struct containing
%   t_shift             output from BATHYMATTER
%   CCmaxs              output from BAHTYMATTER
%   fcorners            output from FREQSELECT or BAHTYMATTER
%   metadata            SAC Headers associated to the obsfile
%   snr                 output from FREQSELECT
%   cmt                 CMT solution from readCMT
%   presiduals          first output from PRESIDUESTAT
% filename          which file to write the catalog
%                   [Default: $MERMAID2/DATA/pp2024catalog.txt]
%
% OUTPUT:
% filename          name of the file where the catalog is written
%
% SEE ALSO:
% BATHYMATTER, FREQSELECT, PRESIDUESTAT, READCMT, READPP2024CATALOG
%
% Last modified by sirawich-at-princeton.edu, 03/26/2024

defval('filename', fullfile(getenv('MERMAID2'), 'DATA','pp2024catalog.txt'))

% THINGS TO PLOT
% - MERFILE
% - SYNFILE (INSTASEIS)
% - SPECFEM-2D_BATH_OBSFILE
% - SPECFEM-2D_HATH_HYDFILE
% - IRIS-ID (USER7)
% - CMT-ID
% - EVLA
% - EVLO
% - EVDP
% - ORIGIN DATE        UUUU-mm-DD
% - ORIGIN TIME (UTC)  HH:MM:ss.SSSSSS
% - MAG_VAL
% - MAG_TYPE
% - STLA
% - STLO
% - STDP (MERMAID parking depth)
% - BATH (Bathymetry below MERMAID, STEL)
% - KSTNM (MERMAID Number)
% - PHASE (phase of the first arrival, KT0)
% - RAYPARAM (USER9)
% - GCARC
% - AZ
% - BAZ
% - FCORNER-LOWER
% - FCORNER-UPPER
% - SNR-ALL
% - SNR-PASS
% - SNR-STOP
% - CC
% - TSHIFT
% - TSHIFT_RATIO
% - INSTASEIS-TAUP

% specify formats                    ; column widths
irisid_fmt        = '%8d      '      ; irisid_hdr = '%8s';
cmtid_fmt         = '%14s      '     ; cmtid_hdr  = '%20s';
evla_fmt          = '%9.4f      '    ; evla_hdr   = '%15s';
evlo_fmt          = evla_fmt         ; evlo_hdr   = evla_hdr;
evdp_fmt          = evla_fmt         ; evdp_hdr   = evla_hdr;
origin_date_fmt   = '%10s      '     ; origin_date_hdr = '%16s';
origin_time_fmt   = '%8s      '      ; origin_time_hdr = '%14s';
mag_val_fmt       = '%6.4f      '    ; mag_val_hdr = '%12s';
mag_type_fmt      = '%3s      '      ; mag_type_hdr = '%9s';

stla_fmt          = evla_fmt         ; stla_hdr = evla_hdr;
stlo_fmt          = evla_fmt         ; stlo_hdr = evla_hdr;
stdp_fmt          = '%6d      '      ; stdp_hdr = '%12s';
bath_fmt          = '%5d      '      ; bath_hdr = '%11s';
kstnm_fmt         = '%5s      '      ; kstnm_hdr = '%11s';
phase_fmt         = '%5s      '      ; phase_hdr = '%11s';
rayparam_fmt      = '%9.4f      '    ; rayparam_hdr = '%15s';
gcarc_fmt         = '%8.4f      '    ; gcarc_hdr = '%14s';
az_fmt            = gcarc_fmt        ; az_hdr = gcarc_hdr;
baz_fmt           = gcarc_fmt        ; baz_hdr = gcarc_hdr;

fcorner_lower_fmt = '%4.2f      '    ; fcorner_lower_hdr = '%10s';
fcorner_upper_fmt = fcorner_lower_fmt; fcorner_upper_hdr = fcorner_lower_hdr;
snr_all_fmt       = '%11.4f      '   ; snr_all_hdr = '%17s';
snr_pass_fmt      = snr_all_fmt      ; snr_pass_hdr = snr_all_hdr;
snr_stop_fmt      = snr_all_fmt      ; snr_stop_hdr = snr_all_hdr;

cc_fmt            = '%6.4f      '    ; cc_hdr = '%12s';
tshift_fmt        = '%7.2f      '    ; tshift_hdr = '%13s';
tshift_ratio_fmt  = '%9.4f      '    ; tshift_ratio_hdr = '%15s';
correction_fmt    = '%6.2f      '    ; correction_hdr = '%12s';

ttravel_fmt       = '%10.2f     '    ; ttravel_hdr = '%16s';
arrival_date_fmt  = origin_date_fmt  ; arrival_date_hdr = origin_date_hdr;
arrival_time_fmt  = origin_time_fmt  ; arrival_time_hdr = origin_time_hdr;

fmt =  [irisid_fmt ...
        cmtid_fmt ...
        evla_fmt ...
        evlo_fmt ...
        evdp_fmt ...
        origin_date_fmt ...
        origin_time_fmt ...
        mag_val_fmt ...
        mag_type_fmt ...
        ...
        stla_fmt ...
        stlo_fmt ...
        stdp_fmt ...
        bath_fmt ...
        kstnm_fmt ...
        phase_fmt ...
        rayparam_fmt ...
        gcarc_fmt ...
        az_fmt ...
        baz_fmt ...
        ...
        fcorner_lower_fmt ...
        fcorner_upper_fmt ...
        snr_all_fmt ...
        snr_pass_fmt ...
        snr_stop_fmt ...
        ...
        cc_fmt ...
        tshift_fmt ...
        tshift_ratio_fmt ...
        correction_fmt ...
        ...
        ttravel_fmt ...
        arrival_date_fmt ...
        arrival_time_fmt ...
        '\n'];

hdr =  [irisid_hdr ...
        cmtid_hdr ...
        evla_hdr ...
        evlo_hdr ...
        evdp_hdr ...
        origin_date_hdr ...
        origin_time_hdr ...
        mag_val_hdr ...
        mag_type_hdr ...
        ...
        stla_hdr ...
        stlo_hdr ...
        stdp_hdr ...
        bath_hdr ...
        kstnm_hdr ...
        phase_hdr ...
        rayparam_hdr ...
        gcarc_hdr ...
        az_hdr ...
        baz_hdr ...
        ...
        fcorner_lower_hdr ...
        fcorner_upper_hdr ...
        snr_all_hdr ...
        snr_pass_hdr ...
        snr_stop_hdr ...
        ...
        cc_hdr ...
        tshift_hdr ...
        tshift_ratio_hdr ...
        correction_hdr ...
        ...
        ttravel_hdr ...
        arrival_date_hdr ...
        arrival_time_hdr ...
        '\n'];

hdr_name = {'IRIS_ID', ...
            'CMT_ID', ...
            'EVLA', ...
            'EVLO', ...
            'EVDP', ...
            'ORIGIN_DATE', ...
            'ORIGIN_TIME', ...
            'MAG_VAL', ...
            'MAG_TYPE', ...
            ...
            'STLA', ...
            'STLO', ...
            'STDP', ...
            'BATH', ...
            'KSTNM', ...
            'PHASE', ...
            'RAYPARAM', ...
            'GCARC', ...
            'AZ', ...
            'BAZ', ...
            ...
            'FC_LOWER', ...
            'FC_UPPER', ...
            'SNR_ALL', ...
            'SNR_PASS', ...
            'SNR_STOP', ...
            ...
            'CC', ...
            'TSHIFT', ...
            'TSHIFT_REL', ...
            'ADJUSTMENT', ...
            'TRAV_AK135F_1S', ...
            'ARRIVAL_DATE', ...
            'ARRIVAL_TIME'};

hdr_num = string(num2cell(1:length(hdr_name)));

hdr_unit = {'', ...
            '', ...
            '(deg)', ...
            '(deg)', ...
            '(km)', ...
            '(YYYY-MM-DD)', ...
            '(HH:MM:SS)', ...
            '', ...
            '', ...
            ...
            '(deg)', ...
            '(deg)', ...
            '(m)', ...
            '(m)', ...
            '', ...
            '', ...
            '(s/rad)', ...
            '(deg)', ...
            '(deg)', ...
            '(deg)', ...
            ...
            '(Hz)', ...
            '(Hz)', ...
            '', ...
            '', ...
            '', ...
            ...
            '', ...
            '(s)', ...
            '', ...
            '(s)', ...
            ...
            '(s)', ...
            '(YYYY-MM-DD)', ...
            '(HH:MM:SS)'};
        
% write the file
n = length(objstruct.metadata.GCARC);
fid = fopen(filename, 'w');
fprintf(fid, hdr, hdr_num{:});
fprintf(fid, hdr, hdr_name{:});
fprintf(fid, hdr, hdr_unit{:});
for ii = 1:n
    % Use the information from CMT solution first. If CMT solution does not
    % exist, use the information from SAC metadata header
    try
        if strcmp(objstruct.cmt.DateTime{ii}, '')
            % set eventname to N/A
            objstruct.cmt.EventName{ii} = 'N/A';
            % calculate the origin time
            dt_ref = datetime(objstruct.metadata.NZYEAR(ii), 1, 0, ...
                              objstruct.metadata.NZHOUR(ii), ...
                              objstruct.metadata.NZMIN(ii), ...
                              objstruct.metadata.NZSEC(ii), ...
                              objstruct.metadata.NZMSEC(ii), ...
                              'TimeZone', 'UTC', ...
                              'Format', 'uuuu-MM-dd HH:mm:ss.SSSSSS') ...
                     + days(objstruct.metadata.NZJDAY(ii));
            dt_origin = dt_ref + seconds(objstruct.metadata.USER8(ii));
            origin_date_time = split(string(dt_origin), ' ');
            mag = objstruct.metadata.MAG(ii);
            ev = irisFetch.Events('eventID', string(objstruct.metadata.USER7(ii)));
            mag_type = ev.PreferredMagnitudeType;
            
            % assign N/A to event name as a place holder
            objstruct.cmt.EventName{ii} = 'N/A';
        else
            origin_date_time = split(objstruct.cmt.DateTime{ii}, ' ');
            dt_origin = datetime(objstruct.cmt.DateTime{ii}, ...
                'InputFormat', 'uuuu/MM/dd HH:mm:ss.S', ...
                'Format', 'uuuu-MM-dd HH:mm:ss.SSSSSS', ...
                'TimeZone', 'UTC');
            mag = objstruct.cmt.Mw(ii);
            mag_type = 'Mww';
        end
    catch ME
        % ERROR for eventID 11618973
        mag_type = 'Mww';
    end
    origin_date = replace(origin_date_time{1}, '/', '-');
    origin_time = indeks(origin_date_time{2}, 1:8);
    % travel time according to tauptime.m on ak135 model with ocean
    % bathymetry adjustment from Simon et al 2022
    travel_time = objstruct.metadata.USER5(ii) + ...
        objstruct.metadata.USER6(ii);
    dt_arrival = dt_origin + seconds(travel_time);
    arrival_date_time = split(string(dt_arrival), ' ');
    arrival_date = replace(arrival_date_time{1}, '/', '-');
    arrival_time = indeks(arrival_date_time{2}, 1:8);
    data = {objstruct.metadata.USER7(ii), ...
            objstruct.cmt.EventName{ii}, ...
            objstruct.metadata.EVLA(ii), ...
            objstruct.metadata.EVLO(ii), ...
            objstruct.metadata.EVDP(ii), ...
            origin_date, ...
            origin_time, ...
            mag, ...
            mag_type, ...
            ...
            objstruct.metadata.STLA(ii), ...
            objstruct.metadata.STLO(ii), ...
            objstruct.metadata.STDP(ii), ...
            -objstruct.metadata.STEL(ii), ...
            replace(objstruct.metadata.KSTNM{ii}, ' ', ''), ...
            objstruct.metadata.KT0{ii}, ...
            objstruct.metadata.USER9(ii), ...
            objstruct.metadata.GCARC(ii), ...
            objstruct.metadata.AZ(ii), ...
            objstruct.metadata.BAZ(ii), ...
            ...
            objstruct.fcorners(ii,1), ...
            objstruct.fcorners(ii,2), ...
            objstruct.snr(ii,1), ...
            objstruct.snr(ii,2), ...
            objstruct.snr(ii,3), ...
            ...
            objstruct.CCmaxs(ii,2), ...
            objstruct.t_shifts(ii,2), ...
            objstruct.t_shifts(ii,2) / travel_time, ...
            objstruct.presiduals(ii), ...
            ...
            travel_time, ...
            arrival_date, ...
            arrival_time};
    fprintf(fid, fmt, data{:});
end
fclose(fid);
end